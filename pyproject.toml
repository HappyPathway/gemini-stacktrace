[tool.poetry]
name = "gemini-stacktrace"
version = "0.1.0"
description = "A Python tool that uses Gemini to analyze stack traces and generate a remediation plan"
authors = ["HappyPathway <info@happypathway.com>"]
readme = "README.md"
packages = [{include = "gemini_stacktrace"}]

[tool.poetry.dependencies]
python = "^3.11"
typer = {extras = ["all"], version = "^0.9.0"}
pydantic = "^2.5.2"
pydantic-ai = "^0.1.4"
google-generativeai = "^0.3.1"
python-dotenv = "^1.0.0"
pathlib = "^1.0.1"
rich = "^13.6.0"
grpcio = "^1.71.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.23.2"
ruff = "^0.1.6"
mypy = "^1.7.1"

[tool.poetry.scripts]
gemini-stacktrace = "gemini_stacktrace.cli:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "F", "I", "N", "W", "B"]
ignore = []

[tool.ruff.isort]
known-first-party = ["gemini_stacktrace"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
